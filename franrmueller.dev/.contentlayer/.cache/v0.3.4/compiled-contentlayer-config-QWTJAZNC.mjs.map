{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// contentlayer.config.ts\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkSmartypants from \"remark-smartypants\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport { visit } from \"unist-util-visit\";\n\n// [[WikiLink]] -> /notes/slug\nfunction remarkWikilink() {\n  return (tree: any) => {\n    visit(tree, \"text\", (node: any, index: number, parent: any) => {\n      const value: string = node.value;\n      const re = /\\[\\[([^\\]]+)\\]\\]/g;\n      let m: RegExpExecArray | null;\n      let last = 0;\n      const out: any[] = [];\n      while ((m = re.exec(value))) {\n        const before = value.slice(last, m.index);\n        if (before) out.push({ type: \"text\", value: before });\n        const target = m[1].trim();\n        const slug = target.toLowerCase().replace(/[^a-z0-9-\\s/]/g, \"\").replace(/\\s+/g, \"-\");\n        out.push({ type: \"link\", url: `/notes/${slug}`, children: [{ type: \"text\", value: target }] });\n        last = re.lastIndex;\n      }\n      const after = value.slice(last);\n      if (out.length) {\n        if (after) out.push({ type: \"text\", value: after });\n        parent.children.splice(index, 1, ...out);\n      }\n    });\n  };\n}\n\nfunction stripPrefix(p: string) {\n  return p.replace(/^(notes|writing|moc|reading)\\//, \"\");\n}\n\n// --- Document Types ---------------------------------------------------------\n\nexport const Note = defineDocumentType(() => ({\n  name: \"Note\",\n  filePathPattern: `notes/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\" },\n    tags: { type: \"list\", of: { type: \"string\" } },\n    status: { type: \"enum\", options: [\"draft\", \"published\"], default: \"draft\" },\n    updated: { type: \"date\" },\n    aliases: { type: \"list\", of: { type: \"string\" } },\n    stage: { type: \"enum\", options: [\"seed\", \"budding\", \"evergreen\"], default: \"seed\" },\n    cover: { type: \"string\" },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\" as const,\n      resolve: (doc: any) => stripPrefix(doc._raw.flattenedPath),\n    },\n    url: {\n      type: \"string\" as const,\n      resolve: (doc: any) => `/notes/${stripPrefix(doc._raw.flattenedPath)}`,\n    },\n    tagsLower: {\n      type: \"list\" as const,\n      of: { type: \"string\" as const },\n      resolve: (doc: any) => (doc.tags || []).map((t: string) => t.toLowerCase()),\n    },\n  },\n}));\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `writing/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\" },\n    date: { type: \"date\", required: true },\n    readingTime: { type: \"number\" },\n    tags: { type: \"list\", of: { type: \"string\" } },\n    status: { type: \"enum\", options: [\"draft\", \"published\"], default: \"published\" },\n    cover: { type: \"string\" },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\" as const,\n      resolve: (doc: any) => stripPrefix(doc._raw.flattenedPath),\n    },\n    url: {\n      type: \"string\" as const,\n      resolve: (doc: any) => `/writing/${stripPrefix(doc._raw.flattenedPath)}`,\n    },\n    tagsLower: {\n      type: \"list\" as const,\n      of: { type: \"string\" as const },\n      resolve: (doc: any) => (doc.tags || []).map((t: string) => t.toLowerCase()),\n    },\n  },\n}));\n\nexport const Moc = defineDocumentType(() => ({\n  name: \"Moc\",\n  filePathPattern: `moc/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\" },\n    mocOf: { type: \"list\", of: { type: \"string\" } },\n    tags: { type: \"list\", of: { type: \"string\" } },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\" as const,\n      resolve: (doc: any) => stripPrefix(doc._raw.flattenedPath),\n    },\n    url: {\n      type: \"string\" as const,\n      resolve: (doc: any) => `/moc/${stripPrefix(doc._raw.flattenedPath)}`,\n    },\n    tagsLower: {\n      type: \"list\" as const,\n      of: { type: \"string\" as const },\n      resolve: (doc: any) => (doc.tags || []).map((t: string) => t.toLowerCase()),\n    },\n  },\n}));\n\nexport const Reference = defineDocumentType(() => ({\n  name: \"Reference\",\n  filePathPattern: `reading/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    author: { type: \"string\" },\n    year: { type: \"number\" },\n    sourceUrl: { type: \"string\" },\n    summary: { type: \"string\" },\n    tags: { type: \"list\", of: { type: \"string\" } },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\" as const,\n      resolve: (doc: any) => stripPrefix(doc._raw.flattenedPath),\n    },\n    url: {\n      type: \"string\" as const,\n      resolve: (doc: any) => `/reading/${stripPrefix(doc._raw.flattenedPath)}`,\n    },\n    tagsLower: {\n      type: \"list\" as const,\n      of: { type: \"string\" as const },\n      resolve: (doc: any) => (doc.tags || []).map((t: string) => t.toLowerCase()),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Note, Post, Moc, Reference],\n  mdx: {\n    remarkPlugins: [remarkWikilink, remarkGfm, remarkSmartypants],\n    rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: \"wrap\" }]],\n  },\n});"],
  "mappings": "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",
  "names": []
}
