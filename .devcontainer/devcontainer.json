# ordep.dev–style minimal site (Next.js + Tailwind + next-themes)

Below is a clean, text-first website skeleton with a sticky header, theme toggle, generous whitespace, and subtle accent color—ready to deploy to Vercel. Copy the files into a fresh Next.js app (App Router, TS). The structure assumes a standard `create-next-app` + Tailwind setup.

```
.
├─ app/
│  ├─ globals.css
│  ├─ layout.tsx
│  ├─ page.tsx            # Home
│  ├─ writing/
│  │  └─ page.tsx         # Writing index
│  └─ reading/
│     └─ page.tsx         # Reading index
├─ components/
│  ├─ Header.tsx
│  ├─ Container.tsx
│  └─ ThemeToggle.tsx
├─ lib/
│  └─ nav.ts
├─ public/
│  └─ favicon.ico
├─ tailwind.config.ts
├─ postcss.config.js
├─ tsconfig.json
└─ package.json (generated by create-next-app)
```

---

## 1) Tailwind + plugins

**tailwind.config.ts**
```ts
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  darkMode: ['class'],
  theme: {
    extend: {
      colors: {
        // Soft modern accents (inspired by LangChain/Anthropic palettes)
        accent: {
          50: '#eef6ff',
          100: '#daeefe',
          200: '#b7dcfc',
          300: '#8cc1f8',
          400: '#5fa1f2',
          500: '#3f84e8', // primary accent
          600: '#2f67c8',
          700: '#274fa0',
          800: '#223f7f',
          900: '#203668',
        },
      },
      fontSize: {
        '2xs': '0.75rem', // tiny helper size for nav
      },
      typography: ({ theme }) => ({
        DEFAULT: {
          css: {
            color: theme('colors.gray.800'),
            a: { color: theme('colors.accent.600'), textDecoration: 'none' },
            'a:hover': { color: theme('colors.accent.700') },
            h1: { letterSpacing: '-0.02em' },
            h2: { letterSpacing: '-0.02em' },
            blockquote: { borderLeftColor: theme('colors.accent.300') },
          },
        },
        invert: {
          css: {
            color: theme('colors.gray.100'),
            a: { color: theme('colors.accent.300') },
            'a:hover': { color: theme('colors.accent.200') },
            blockquote: { borderLeftColor: theme('colors.accent.500') },
          },
        },
      }),
    },
  },
  plugins: [require('@tailwindcss/typography')],
}
export default config
```

**postcss.config.js**
```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

---

## 2) Global styles

**app/globals.css**
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Smooth type + gentle spacing */
:root {
  --radius: 1.25rem;
}

html { scroll-behavior: smooth; }

body {
  @apply bg-white text-gray-900 antialiased; /* light */
}

.dark body {
  @apply bg-gray-950 text-gray-100; /* dark */
}

/* Prose defaults */
.prose {
  @apply max-w-3xl; /* narrow column for focus */
}

/* Links */
a {
  @apply underline-offset-4 decoration-accent-300 hover:decoration-accent-500;
}

/* Subtle hairline divider */
.hr { @apply h-px w-full bg-gray-200 dark:bg-gray-800; }
```

---

## 3) Core layout & providers

**app/layout.tsx**
```tsx
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { ThemeProvider } from 'next-themes'
import Header from '@/components/Header'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: {
    default: 'Fran R. Müller',
    template: '%s · Fran R. Müller',
  },
  description: 'I love systems — writing, reading, and building.',
  metadataBase: new URL('https://franrmueller.dev'),
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
          <Header />
          <main className="px-4 sm:px-6">
            <div className="mx-auto max-w-3xl py-10">
              {children}
            </div>
          </main>
        </ThemeProvider>
      </body>
    </html>
  )
}
```

---

## 4) Navigation & theme toggle

**components/Container.tsx**
```tsx
import { ReactNode } from 'react'

export default function Container({ children }: { children: ReactNode }) {
  return (
    <div className="mx-auto w-full max-w-5xl px-4 sm:px-6">
      {children}
    </div>
  )
}
```

**lib/nav.ts**
```ts
export const nav = [
  { name: 'Home', href: '/' },
  { name: 'Writing', href: '/writing' },
  { name: 'Reading', href: '/reading' },
]
```

**components/ThemeToggle.tsx**
```tsx
'use client'

import { useTheme } from 'next-themes'
import { useEffect, useState } from 'react'

export default function ThemeToggle() {
  const { theme, setTheme, resolvedTheme } = useTheme()
  const [mounted, setMounted] = useState(false)
  useEffect(() => setMounted(true), [])
  if (!mounted) return (
    <button aria-label="Toggle theme" className="rounded-xl border px-3 py-1 text-2xs opacity-60">
      …
    </button>
  )

  const isDark = (resolvedTheme ?? theme) === 'dark'

  return (
    <button
      aria-label="Toggle theme"
      onClick={() => setTheme(isDark ? 'light' : 'dark')}
      className="rounded-xl border border-gray-200/70 px-3 py-1 text-2xs text-gray-600 transition hover:bg-gray-50 dark:border-gray-800 dark:text-gray-300 dark:hover:bg-gray-900"
    >
      {isDark ? '☀︎ Light' : '☾ Dark'}
    </button>
  )
}
```

**components/Header.tsx**
```tsx
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import Container from './Container'
import ThemeToggle from './ThemeToggle'
import { nav } from '@/lib/nav'

export default function Header() {
  const pathname = usePathname()

  return (
    <div className="sticky top-0 z-50 border-b border-gray-200/80 bg-white/70 backdrop-blur dark:border-gray-800 dark:bg-gray-950/70">
      <Container>
        <div className="flex h-14 items-center justify-between">
          <div className="flex items-center gap-6">
            <Link href="/" className="font-medium tracking-tight">
              Fran R. Müller
            </Link>
            <nav aria-label="Main" className="hidden gap-4 sm:flex">
              {nav.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  className={
                    'text-2xs uppercase tracking-wide opacity-60 transition hover:opacity-100 ' +
                    (pathname === item.href
                      ? 'text-accent-700 opacity-100 dark:text-accent-300'
                      : 'text-gray-700 dark:text-gray-300')
                  }
                >
                  {item.name}
                </Link>
              ))}
            </nav>
          </div>
          <ThemeToggle />
        </div>
      </Container>
    </div>
  )
}
```

---

## 5) Pages (Home, Writing, Reading)

**app/page.tsx** (Home)
```tsx
export default function HomePage() {
  return (
    <section className="prose prose-neutral dark:prose-invert">
      <h1 className="mb-2">Fran R. Müller</h1>
      <p className="mt-0 text-gray-600 dark:text-gray-300">I love systems.</p>
      <div className="hr my-6" />
      <p>
        Welcome to my corner of the internet. I write longer posts and shorter notes about
        building systems, tooling, and the things I&apos;m learning.
      </p>
      <p>
        If you&apos;re curious what I&apos;m currently reading, check out the <a href="/reading">reading</a> page.
      </p>
    </section>
  )
}
```

**app/writing/page.tsx**
```tsx
// Simple in-memory list to start. Later swap for Contentlayer MDX.
const posts = [
  {
    title: 'Building tiny tools',
    date: '2025-08-01',
    summary: 'Notes on small, composable utilities and why they scale better than monoliths.',
    slug: 'building-tiny-tools',
  },
  {
    title: 'A week with Next.js App Router',
    date: '2025-07-14',
    summary: 'What worked, what didn\'t, and a few patterns I\'m keeping.',
    slug: 'next-app-router-week',
  },
]

export default function WritingPage() {
  return (
    <section className="prose prose-neutral dark:prose-invert">
      <h1>Writing</h1>
      <p className="-mt-2 text-sm text-gray-500 dark:text-gray-400">
        Longer posts and occasional notes.
      </p>
      <ul className="not-prose mt-6 space-y-6">
        {posts.map((p) => (
          <li key={p.slug} className="group">
            <a href={`/writing/${p.slug}`} className="block">
              <div className="flex items-baseline justify-between gap-4">
                <h3 className="text-base font-medium tracking-tight group-hover:text-accent-600 dark:group-hover:text-accent-300">
                  {p.title}
                </h3>
                <time className="text-2xs uppercase tracking-wide text-gray-500 dark:text-gray-400">
                  {new Date(p.date).toLocaleDateString(undefined, {
                    year: 'numeric', month: 'short', day: '2-digit',
                  })}
                </time>
              </div>
              <p className="mt-1 text-sm text-gray-600 dark:text-gray-300">{p.summary}</p>
            </a>
          </li>
        ))}
      </ul>
    </section>
  )
}
```

**app/reading/page.tsx**
```tsx
const books = [
  { title: 'Designing Data-Intensive Applications', by: 'Kleppmann', status: 'Exploring' },
  { title: 'An Elegant Puzzle', by: 'Larson', status: 'Revisiting' },
]

export default function ReadingPage() {
  return (
    <section className="prose prose-neutral dark:prose-invert">
      <h1>Reading</h1>
      <p className="-mt-2 text-sm text-gray-500 dark:text-gray-400">
        Books, papers, and resources I&apos;m exploring.
      </p>
      <ul className="not-prose mt-6 space-y-3">
        {books.map((b) => (
          <li key={b.title} className="flex items-center justify-between">
            <span className="font-medium">{b.title}</span>
            <span className="text-sm text-gray-500 dark:text-gray-400">{b.by}</span>
            <span className="text-2xs uppercase tracking-wide text-accent-700 dark:text-accent-300">{b.status}</span>
          </li>
        ))}
      </ul>
    </section>
  )
}
```

---

## 6) Install steps (run in a new folder)

```bash
# 1) Create the app
npx create-next-app@latest franrmueller.dev --ts --eslint --src-dir=false --app --tailwind --use-npm
cd franrmueller.dev

# 2) Theme support
npm i next-themes @tailwindcss/typography

# 3) Replace/add files
# - Overwrite tailwind.config.ts, postcss.config.js, app/globals.css
# - Add components/, lib/ and the page files shown above

# 4) Dev
npm run dev

# 5) Deploy
# Push to GitHub, then import the repo in Vercel and set the production domain to franrmueller.dev
```

---

## 7) Optional polish (quick wins)
- **Tighten line-length**: the `.prose` max width is set to ~672px (`max-w-3xl`). Adjust to taste.
- **Accent gradient underline**: add `bg-gradient-to-r from-accent-300 to-accent-500 bg-[length:100%_1px] bg-no-repeat [background-position:0_100%]` to link styles for a classier underline.
- **RSS + MDX**: when ready, swap the writing list for Contentlayer + MDX and generate RSS.
- **Analytics**: add Umami or Plausible with a single script tag.

This baseline mirrors the minimal, text-first feel of ordep.dev while staying simple to extend.

---

## 8) Codespaces config — `.devcontainer/devcontainer.json`
Create the folder and file: `.devcontainer/devcontainer.json` with the contents below.

```json
{
  "name": "Next.js + Tailwind (Node 20)",
  "image": "mcr.microsoft.com/devcontainers/typescript-node:20",
  "customizations": {
    "vscode": {
      "settings": {
        "editor.formatOnSave": true,
        "files.eol": "
",
        "terminal.integrated.defaultProfile.linux": "bash",
        "typescript.tsdk": "node_modules/typescript/lib"
      },
      "extensions": [
        "esbenp.prettier-vscode",
        "dbaeumer.vscode-eslint",
        "bradlc.vscode-tailwindcss",
        "csstools.postcss",
        "streetsidesoftware.code-spell-checker"
      ]
    }
  },
  "forwardPorts": [3000],
  "portsAttributes": {
    "3000": {
      "label": "Next.js dev server",
      "onAutoForward": "openBrowser"
    }
  },
  "postCreateCommand": "if [ -f package.json ]; then npm install; fi",
  "remoteUser": "node",
  "updateContentCommand": "echo 'Ready to code 🎉'"
}
```

**What this does**
- Uses a Node 20 image ready for TS/Next.js.
- Installs recommended VS Code extensions.
- Auto-forwards port **3000** and opens the browser when the dev server starts.
- Runs `npm install` automatically if a `package.json` exists.

**How to use in Codespaces**
1. Commit this file, push to GitHub.
2. Open **Code → Codespaces → Create codespace on main**.
3. In the terminal, run `npm run dev` and use the preview link.
```